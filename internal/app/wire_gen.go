// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"rk-api/internal/app/api"
	"rk-api/internal/app/game/crash"
	"rk-api/internal/app/game/dice"
	"rk-api/internal/app/game/hash"
	"rk-api/internal/app/game/limbo"
	"rk-api/internal/app/game/mine"
	"rk-api/internal/app/router"
	"rk-api/internal/app/service"
	"rk-api/internal/app/service/repository"
)

import (
	_ "rk-api/internal/app/swagger"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	db := provideMysql()
	client := provideRDS()
	activityRepository := &repository.ActivityRepository{
		DB:  db,
		RDS: client,
	}
	userRepository := &repository.UserRepository{
		DB:  db,
		RDS: client,
	}
	adminRepository := &repository.AdminRepository{
		DB: db,
	}
	stateService := service.ProvideStateService()
	adminService := service.ProvideAdminService(adminRepository, stateService)
	walletRepository := &repository.WalletRepository{
		DB:  db,
		RDS: client,
	}
	walletService := service.ProvideWalletService(walletRepository)
	verifyService := service.ProvideVerifyService(userRepository, adminService, stateService)
	financialRepository := &repository.FinancialRepository{
		DB:  db,
		RDS: client,
	}
	financialService := service.ProvideFinancialService(financialRepository)
	minioClient := provideMinio()
	userService := service.ProvideUserService(userRepository, adminService, stateService, walletService, verifyService, financialService, minioClient)
	activityService := service.ProvideActivityService(activityRepository, userService, walletService)
	activityAPI := &api.ActivityAPI{
		Srv: activityService,
	}
	agentRepository := &repository.AgentRepository{
		DB:  db,
		RDS: client,
	}
	agentService := service.ProvideAgentService(agentRepository, userService, adminService, walletService)
	agentAPI := &api.AgentAPI{
		Srv: agentService,
	}
	flowRepository := &repository.FlowRepository{
		DB: db,
	}
	flowService := service.ProvideFlowService(flowRepository, userService, agentService, stateService)
	flowAPI := &api.FlowAPI{
		Srv: flowService,
	}
	nineRepository := &repository.NineRepository{
		DB:  db,
		RDS: client,
	}
	nineService := service.ProvideNineService(nineRepository, userService, walletService)
	iNine := provideNine(nineService)
	nineAPI := &api.NineAPI{
		Srv:  nineService,
		Nine: iNine,
	}
	rechargeRepository := &repository.RechargeRepository{
		DB:  db,
		RDS: client,
	}
	rechargeService := service.ProvideRechargeService(rechargeRepository, userService, flowService, walletService, agentService)
	rechargeAPI := &api.RechargeAPI{
		Srv: rechargeService,
	}
	userAPI := &api.UserAPI{
		Srv: userService,
	}
	quizRepository := &repository.QuizRepository{
		DB: db,
	}
	quizService := service.ProvideQuizService(quizRepository, userService, walletService)
	quizAPI := &api.QuizAPI{
		Srv: quizService,
	}
	wingoRepository := &repository.WingoRepository{
		DB:  db,
		RDS: client,
	}
	wingoService := service.ProvideWingoService(wingoRepository, userService, adminService, stateService, walletService)
	iWingo := provideWingo(wingoService)
	wingoAPI := &api.WingoAPI{
		Srv:   wingoService,
		Wingo: iWingo,
	}
	withdrawRepository := &repository.WithdrawRepository{
		DB:  db,
		RDS: client,
	}
	withdrawService := service.ProvideWithdrawService(withdrawRepository, userService, flowService, walletService, verifyService)
	withdrawAPI := &api.WithdrawAPI{
		Srv: withdrawService,
	}
	r8Repository := &repository.R8Repository{
		DB: db,
	}
	r8Service := service.ProvideR8Service(r8Repository, userService, walletService)
	r8API := &api.R8API{
		Srv: r8Service,
	}
	zfRepository := &repository.ZfRepository{
		DB: db,
	}
	zfService := service.ProvideZfService(zfRepository, userService, walletService)
	zfAPI := &api.ZfAPI{
		Srv: zfService,
	}
	adminAPI := &api.AdminAPI{
		Srv:     adminService,
		UserSrv: userService,
	}
	gameRepository := &repository.GameRepository{
		DB:  db,
		RDS: client,
	}
	jhszRepository := &repository.JhszRepository{
		DB: db,
	}
	authService := service.ProvideAuthService(userRepository, adminService, userService, verifyService, stateService)
	jhszService := service.ProvideJhszService(jhszRepository, userService, walletService, authService)
	gameService := service.ProvideGameService(gameRepository, userService, jhszService)
	gameAPI := &api.GameAPI{
		Srv: gameService,
	}
	oauthRepository := &repository.OauthRepository{
		DB: db,
	}
	oauthService := service.ProvideOauthService(oauthRepository, userService)
	oauthAPI := &api.OauthAPI{
		Srv:     oauthService,
		UserSrv: userService,
		AuthSrv: authService,
	}
	authAPI := &api.AuthAPI{
		Srv: authService,
	}
	verifyAPI := &api.VerifyAPI{
		Srv: verifyService,
	}
	chainRepository := &repository.ChainRepository{
		DB:  db,
		RDS: client,
	}
	chainService := service.ProvideChainService(chainRepository)
	chainAPI := &api.ChainAPI{
		Srv: chainService,
	}
	jhszAPI := &api.JhszAPI{
		Srv: jhszService,
	}
	walletAPI := &api.WalletAPI{
		Srv: walletService,
	}
	notificationRepository := &repository.NotificationRepository{
		DB: db,
	}
	notificationService := service.ProvideNotificationService(notificationRepository, userService)
	notificationAPI := &api.NotificationAPI{
		Srv: notificationService,
	}
	chatRepository := &repository.ChatRepository{
		DB:  db,
		RDS: client,
	}
	chatService := service.ProvideChatService(chatRepository, userService)
	chatAPI := &api.ChatAPI{
		Srv: chatService,
	}
	platRepository := &repository.PlatRepository{
		DB: db,
	}
	platService := service.ProvidePlatService(platRepository, userService)
	platAPI := &api.PlatAPI{
		Srv: platService,
	}
	realRepository := &repository.RealRepository{
		DB: db,
	}
	realService := service.ProvideRealService(realRepository, userService)
	realAPI := &api.RealAPI{
		Srv: realService,
	}
	transactionRepository := &repository.TransactionRepository{
		DB: db,
	}
	transactionService := service.ProvideTransactionService(transactionRepository, userService, walletService)
	transactionAPI := &api.TransactionAPI{
		Srv: transactionService,
	}
	statsRepository := &repository.StatsRepository{
		DB:  db,
		RDS: client,
	}
	statsService := service.ProvideStatsService(statsRepository, jhszService, agentService, stateService, gameService)
	statsAPI := &api.StatsAPI{
		Srv: statsService,
	}
	hashGameRepository := &repository.HashGameRepository{
		DB: db,
	}
	hashGameService := service.ProvideHashGameService(hashGameRepository, userService, walletService)
	hashGameAPI := &api.HashGameAPI{
		Srv: hashGameService,
	}
	gameManage := hash.NewGameManage(hashGameService)
	sdGameAPI := &api.SDGameAPI{
		GameManage: gameManage,
	}
	crashGameRepository := &repository.CrashGameRepository{
		DB:  db,
		RDS: client,
	}
	crashGameService := service.ProvideCrashGameService(crashGameRepository, userService, walletService)
	crashGame := crash.NewCrashGame(crashGameService)
	crashGameAPI := &api.CrashGameAPI{
		CrashGame: crashGame,
	}
	mineGameRepository := &repository.MineGameRepository{
		DB: db,
	}
	mineGameService := service.ProvideMineGameService(mineGameRepository, userService, walletService)
	mineGame := mine.NewMineGame(mineGameService)
	mineGameAPI := &api.MineGameAPI{
		MineGame: mineGame,
	}
	diceGameRepository := &repository.DiceGameRepository{
		DB: db,
	}
	diceGameService := service.ProvideDiceGameService(diceGameRepository, userService, walletService)
	diceGame := dice.NewDiceGame(diceGameService)
	diceGameAPI := &api.DiceGameAPI{
		DiceGame: diceGame,
	}
	limboGameRepository := &repository.LimboGameRepository{
		DB: db,
	}
	limboGameService := service.ProvideLimboGameService(limboGameRepository, userService, walletService)
	limboGame := limbo.NewLimboGame(limboGameService)
	limboGameAPI := &api.LimboGameAPI{
		LimboGame: limboGame,
	}
	routerRouter := &router.Router{
		ActivityAPI:     activityAPI,
		AgentAPI:        agentAPI,
		FlowAPI:         flowAPI,
		NineAPI:         nineAPI,
		RechargeAPI:     rechargeAPI,
		UserAPI:         userAPI,
		QuizAPI:         quizAPI,
		WingoAPI:        wingoAPI,
		WithdrawAPI:     withdrawAPI,
		R8API:           r8API,
		ZfAPI:           zfAPI,
		AdminAPI:        adminAPI,
		GameAPI:         gameAPI,
		OauthAPI:        oauthAPI,
		AuthAPI:         authAPI,
		VerifyAPI:       verifyAPI,
		ChainAPI:        chainAPI,
		JhszAPI:         jhszAPI,
		WalletAPI:       walletAPI,
		NotificationAPI: notificationAPI,
		ChatAPI:         chatAPI,
		PlatAPI:         platAPI,
		RealAPI:         realAPI,
		TransactionAPI:  transactionAPI,
		StatsAPI:        statsAPI,
		HashGameAPI:     hashGameAPI,
		SDGameAPI:       sdGameAPI,
		CrashGameAPI:    crashGameAPI,
		MineGameAPI:     mineGameAPI,
		DiceGameAPI:     diceGameAPI,
		LimboGameAPI:    limboGameAPI,
	}
	engine := InitGinEngine(routerRouter)
	asyncServiceManager := &service.AsyncServiceManager{
		FlowSrv:         flowService,
		UserSrv:         userService,
		AgentSrv:        agentService,
		ActivitySrv:     activityService,
		AdminSrv:        adminService,
		StatsSrv:        statsService,
		RechargeSrv:     rechargeService,
		R8Srv:           r8Service,
		ZfSrv:           zfService,
		WingoSrv:        wingoService,
		NineSrv:         nineService,
		ChainSrv:        chainService,
		NotificationSrv: notificationService,
		GameSrv:         gameService,
	}
	iAsyncService := provideService(asyncServiceManager)
	injector := &Injector{
		Engine:  engine,
		Service: iAsyncService,
		Nine:    iNine,
		Wingo:   iWingo,
	}
	return injector, func() {
	}, nil
}
